@page "/chat-playground"
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Markdig

@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject IJSRuntime JS

<MudText Typo="Typo.h3">Chat Playground</MudText>
<MudStack>
	<MudCard>
		<MudCardContent>
			<MudGrid>
				<MudItem xs="9">
					Amazon Titan Text G1 - Lite (amazon.titan-text-lite-v1)
				</MudItem>
			</MudGrid>
		</MudCardContent>
	</MudCard>
	<MudCard>
		<MudCardContent>
			<MudTimeline Reverse=true>
				@foreach (var item in _chatMessageHistory.Messages)
				{
					string label = item.Role == MessageRole.Human ? "Human" : "Assistant";
					<MudTimelineItem>
						<MudField Label="@label" Class="white-space-pre-line">
							@((MarkupString)Markdown.ToHtml(item.Content!))
						</MudField>
					</MudTimelineItem>
				}
				<MudTimelineItem>
					<MudTextField id="PromptId" @ref="_promptField" T="string" ValueChanged="@OnPromptChanged" Label="Human"></MudTextField>
				</MudTimelineItem>
			</MudTimeline>
		</MudCardContent>
		<MudCardActions>
			<MudButton Class="ml-auto" Disabled="@_isThinking" Variant="Variant.Filled" Color="Color.Primary" OnClick="Reset">
				@if (_isThinking)
				{
					<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
					<MudText Class="ms-2">Thinking...</MudText>
				}
				else
				{
					<MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Replay" Size="Size.Small"></MudIcon>
					<MudText Class="ms-2">Reset</MudText>
				}
			</MudButton>
		</MudCardActions>
	</MudCard>
</MudStack>


@code {
	private string? _modelId;
	private readonly ChatMessageHistory _chatMessageHistory = new();
	private bool _isThinking;
	private MudTextField<string>? _promptField;

	protected override async Task OnInitializedAsync()
	{
		_modelId = "amazon.titan-text-lite-v1";

		await base.OnInitializedAsync();
		StateHasChanged();
	}

	private async Task Reset(MouseEventArgs e)
	{
		await _promptField?.SetText("")!;
		await _chatMessageHistory.Clear();
	}

	private async Task OnPromptChanged(string inputValue)
	{
		if (string.IsNullOrEmpty(inputValue))
			return;

		_isThinking = true;
		StateHasChanged();
		await Task.Delay(1);

		await _chatMessageHistory.AddUserMessage(inputValue);

		var bodyJson = AmazonTitanText.CreateBodyJson(_chatMessageHistory.Messages.AsHistory());
		var response = await BedrockRuntimeClient.InvokeModelAsync(_modelId!, bodyJson).ConfigureAwait(false);
		var generatedText = response?["results"]?[0]?["outputText"]?.GetValue<string>() ?? string.Empty;

		await _chatMessageHistory.AddAiMessage(generatedText!);

		await Completed();
	}

	private async Task Completed()
	{
		await InvokeAsync(() =>
		{
			_promptField?.SetText("");
			_isThinking = false;
			StateHasChanged();
			return Task.CompletedTask;
		});
	}
}
