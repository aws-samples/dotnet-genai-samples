@page "/image-playground"
@using Amazon.Bedrock.Model;
@using Amazon.Bedrock;
@using Amazon.BedrockRuntime;
@using System.Text.Json.Nodes
@using Amazon.GenAI.Internal
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject AmazonBedrockClient BedrockClient
@inject IJSRuntime JS

<MudText Typo="Typo.h3">Image Playground</MudText>
<MudStack>
    <MudCard>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="9">
                    Amazon Titan Image Generator G1 (amazon.titan-image-generator-v1)
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    <form method="post" @onsubmit="OnSubmit">
        <MudCard>
            <MudCardContent>
                <MudTextField Counter=0 id="PromptId" Label="Prompt" @bind-Value="_prompt" Lines=5 Variant="Variant.Outlined" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Disabled="@_isThinking" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @if (_isThinking)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Thinking...</MudText>
                    }
                    else
                    {
                        <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Forward" Size="Size.Small"></MudIcon>
                        <MudText Class="ms-2">Submit</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </form>
    @foreach (var imageSrc in _listBase64Images)
    {
        <MudPaper id="ImageId" Class="d-flex justify-center">
            <MudImage Class="pa-4" Src="@imageSrc"></MudImage>
        </MudPaper>
    }
</MudStack>

@code {
    private readonly List<string> _listBase64Images = new();

    private bool _isThinking;

    private string? _prompt;

    protected override async Task OnInitializedAsync()
    {
        var allModels = (await BedrockClient.ListFoundationModelsAsync(new ListFoundationModelsRequest())).ModelSummaries
            .Where(x => x.OutputModalities.Contains("IMAGE"))
            .OrderBy(x => x.ProviderName);

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnSubmit()
    {
        var modelId = "amazon.titan-image-generator-v1";
        _listBase64Images.Clear();
        _isThinking = true;
        StateHasChanged();
        await Task.Delay(1);

        var rand = new Random();

        var response = await BedrockRuntimeClient.InvokeModelAsync<AmazonTitanTextToImageResponse>(
            modelId,
            new JsonObject
                {
                    ["taskType"] = "TEXT_IMAGE",
                    ["textToImageParams"] = new JsonObject
                    {
                        ["text"] = _prompt
                    },
                    ["imageGenerationConfig"] = new JsonObject
                    {
                        ["quality"] = "standard",
                        ["width"] = 1024,
                        ["height"] = 1024,
                        ["cfgScale"] = 8.0,
                        ["seed"] = rand.Next(),
                        ["numberOfImages"] = 1,
                    }
                }).ConfigureAwait(false);

        var images = response?.Images.Select(x => Convert.FromBase64String(x ?? string.Empty)).ToList() ?? [];

        foreach (var data in images)
        {
            _listBase64Images.Add($"data:image/jpeg;base64,{ToBase64(data)}");
        }

        _isThinking = false;
    }

    public string ToBase64(byte[] bytes)
    {
        return Convert.ToBase64String(bytes ?? Array.Empty<byte>());
    }
}
