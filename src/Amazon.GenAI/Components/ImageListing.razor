@using Amazon.GenAI.Abstractions.OpenSearch
@using Amazon.GenAI.Models

<div class="container text-center">
    <div class="row d-flex justify-center">
        @if (ActionType == ActionType.Searching)
        {
            @foreach (var result in SearchResults!)
            {
                Uri uri = new Uri($"http://{result.Path}");
                string path = Uri.UnescapeDataString(uri.PathAndQuery);

                // Get the last segment of the path (everything after the last '/')
                string fileName = Path.GetFileName(path);

                // Remove query string if present
                int queryIndex = fileName.IndexOf('?');
                if (queryIndex != -1)
                {
                    fileName = fileName.Substring(0, queryIndex);
                }

                var styleWidth = $"width:{Width}px";
                <div class="col">
                    <div class="position-relative" style="@styleWidth">
                        <MudTooltip Text="@result.Text" Arrow="true" Placement="Placement.Top" ShowOnHover="true" Inline="true" Style="@styleWidth">
                            <MudImage Width="@Width" Src="@($"http://{result.Path}")" Alt="@fileName" Elevation="6" Class="pa-3 ma-2"/>
                        </MudTooltip>
                        <div>
                            <MudChip T="string" Color="Color.Dark" Text="@fileName"/>
                        </div>
                        @if (result.Score < 1)
                        {
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="font-size: 1.5em">
                                @Math.Round((double)(result.Score * 100)!)%
                            </span>
                        }
                    </div>
                </div>
            }

            <div class="container text-center">
                <div class="row d-flex justify-center">
                    @for (var i = 0; i < ImageUrls.Count; i++)
                    {
                        var file = Files.ElementAt(i);
                        var imageDataUrl = ImageUrls[i];
                        <div class="col">
                            <MudImage Width="@Width" Src="@imageDataUrl" Alt="@file.Key" Elevation="6" Class="pa-3 ma-2" />
                            <div>
                                <MudChip T="string" Color="Color.Dark" Text="@file.Key" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        @if (ActionType == ActionType.Adding && SearchType)
        {
            <div class="container text-center">
                <div class="row d-flex justify-center">
                    @for (var i = 0; i < ImageUrls.Count; i++)
                    {
                        var file = Files.ElementAt(i);
                        var imageDataUrl = ImageUrls[i];
                        <div class="col">
                            <MudImage Width="@Width" Src="@imageDataUrl" Alt="@file.Key" Elevation="6" Class="pa-3 ma-2" />
                            <div>
                                <MudChip T="string" Color="Color.Dark" Text="@file.Key" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public ActionType ActionType { get; set; }

    [Parameter]
    public IReadOnlyCollection<VectorSearchResponse>? SearchResults { get; set; } = new List<VectorSearchResponse>();

    [Parameter]
    public Dictionary<string, string> Files { get; set; } = new();

    [Parameter]
    public List<string> ImageUrls { get; set; } = new();

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public bool SearchType { get; set; }
}
