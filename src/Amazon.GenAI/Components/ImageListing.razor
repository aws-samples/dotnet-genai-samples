@using Amazon.GenAI.Abstractions.OpenSearch
@using Amazon.GenAI.Models

@foreach (var result in SearchResults!)
{
    <div class="image-container">
        @{
            var uri = new Uri($"http://{result.Path}");
            var path = Uri.UnescapeDataString(uri.PathAndQuery);
            var fileName = Path.GetFileName(path);
            var queryIndex = fileName.IndexOf('?');
            if (queryIndex != -1)
            {
                fileName = fileName.Substring(0, queryIndex);
            }

            var classifications = result.Classifications?.Split(",");
        }

        <MudImage Src="@($"http://{result.Path}")" Elevation="0" Class="pa-1 ma-2" Width="400" />
      
        <div class="description-container">
            <h3>@fileName</h3>
            <div class="description">
                <div><strong>Score:</strong> @Math.Round((double)(result.Score * 100)!)%</div>
                <div>
                    <strong>Categories:</strong>
                    @if (classifications != null)
                    {
                        foreach (var category in classifications)
                        {
                            <MudChip T="string" Color="Color.Dark" Text="@category.ToLower()" Size="Size.Small"/>
                        }
                    }
                </div>
                <div>@result.Text</div>
            </div>
        </div>
    </div>
}

@*         @for (var i = 0; i < ImageUrls.Count; i++)
    {
    var file = Files.ElementAt(i);
    var imageDataUrl = ImageUrls[i];
    <MudImage Width="@Width" Src="@imageDataUrl" Alt="@file.Key" Elevation="6" Class="pa-1 ma-2" />
    } *@

@* @if (ActionType == ActionType.Adding && SearchType)
{
    @for (var i = 0; i < ImageUrls.Count; i++)
    {
        var file = Files.ElementAt(i);
        var imageDataUrl = ImageUrls[i];
        <MudImage Width="@Width" Src="@imageDataUrl" Alt="@file.Key" Elevation="6" Class="pa-1 ma-2" />
    }
} *@


@code {
    [Parameter]
    public ActionType ActionType { get; set; }

    [Parameter]
    public IReadOnlyCollection<VectorSearchResponse>? SearchResults { get; set; } = new List<VectorSearchResponse>();

    [Parameter]
    public Dictionary<string, string> Files { get; set; } = new();

    [Parameter]
    public List<string> ImageUrls { get; set; } = new();

    [Parameter]
    public int Width { get; set; }

    [Parameter] public bool SearchType { get; set; } = false;

    [Parameter] public bool ShowRelevance { get; set; } = false;
}
