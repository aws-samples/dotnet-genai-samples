@using Amazon.BedrockAgentRuntime.Model
@using Amazon.Runtime.Internal


<MudPaper Elevation="0">
        <div id="filters" class="row pt-6">
            <div class="col-6">
                <MudSelect T="string" Required="true" MultiSelection="false" Dense="true"
                           SelectedValuesChanged="OnSelectedCountriesChanged"
                           Label="Select Country"
                           Variant="Variant.Outlined">
                    @if (Countries != null)
                    {
                        @foreach (var item in Countries)
                        {
                            <MudSelectItem Value="@item" />
                        }
                    }
                </MudSelect>
            </div>
            <div class="col-6">
                <MudSelect T="string" Required="true" MultiSelection="false" Dense="true"
                           SelectedValuesChanged="OnSelectedCitiesChanged"
                           Label="Select City"
                           Variant="Variant.Outlined">
                    @if (Cities != null)
                    {
                        @foreach (var item in Cities)
                        {
                            <MudSelectItem Value="@item" />
                        }
                    }
                </MudSelect>
            </div>
        </div>
</MudPaper>


@code {
    [Parameter] public HashSet<string>? Countries { get; set; }
    [Parameter] public HashSet<string>? Cities { get; set; }

    [Parameter] public EventCallback<AutoConstructedList<RetrievalFilter>> OnFilterUpdated { get; set; }

    private HashSet<string> SelectedCountries { get; set; } = new();
    private HashSet<string> SelectedCities { get; set; } = new();

    AutoConstructedList<RetrievalFilter> _kbFilters = new();

    private void OnSelectedCountriesChanged(IEnumerable<string> values)
    {
        _kbFilters.Clear();
        SelectedCountries.Clear();

        foreach (var item in values)
        {
            SelectedCountries.Add(item);

            var retrievalFilter = new RetrievalFilter
                {
                    Equals = new FilterAttribute
                    {
                        Key = "country",
                        Value = item
                    }
                };

            _kbFilters.Add(retrievalFilter);
        }

        foreach (var item in SelectedCities)
        {
            var retrievalFilter = new RetrievalFilter
                {
                    Equals = new FilterAttribute
                    {
                        Key = "city",
                        Value = item
                    }
                };

            _kbFilters.Add(retrievalFilter);
        }

        var task = OnFilterUpdated.InvokeAsync(_kbFilters);
        task.Wait();
    }

    private void OnSelectedCitiesChanged(IEnumerable<string> values)
    {
        _kbFilters.Clear();
        SelectedCities.Clear();

        foreach (var item in values)
        {
            SelectedCities.Add(item);

            var retrievalFilter = new RetrievalFilter
            {
                Equals = new FilterAttribute
                {
                    Key = "city",
                    Value = item
                }
            };

            _kbFilters.Add(retrievalFilter);
        }

        foreach (var item in SelectedCountries)
        {
            var retrievalFilter = new RetrievalFilter
            {
                Equals = new FilterAttribute
                {
                    Key = "country",
                    Value = item
                }
            };

            _kbFilters.Add(retrievalFilter);
        }

        var task = OnFilterUpdated.InvokeAsync(_kbFilters);
        task.Wait();
    }
}
