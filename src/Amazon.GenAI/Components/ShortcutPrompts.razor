@inject IJSRuntime JsRuntime

<div class="shortcuts-wrapper">
    <div class="container-fluid h-100 d-flex flex-column">
        <div class="row">
            <div class="col-2"></div>

            @foreach (var item in GetRandomPrompts())
            {
                <div class="col-2">
                    <MudButton Variant="Variant.Filled"
                               DisableElevation="true"
                               Size="Size.Small"
                               FullWidth="true"
                               OnClick="@(() => PromptChanged(item))">
                        @item
                    </MudButton>
                </div>
            }

            <div class="col-2"></div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<string> OnPromptChanged { get; set; }
    [Parameter]
    public string[] Prompts { get; set; } =
    [
        "What are the check-in and check-out times",
    "Is there a free shuttle service from the airport?",
    "Does the room rate include breakfast?",
    "Do you have a fitness center or swimming pool?",
    "Is there an on-site restaurant or room service available?",
    "What type of views does the room offer?",
    "How far is the hotel from the Las Vegas Strip?",
    "Do you offer any complimentary drinks or gambling vouchers for guests?",
    "Do you have non-gaming areas for families or those who prefer a quieter environment?",
    "Is there a concierge service?"
    ];

    private async Task PromptChanged(string prompt)
    {
        await OnPromptChanged.InvokeAsync(prompt);
        await JsRuntime.InvokeVoidAsync("dispatchResizeEvent");
    }

    public string[] GetRandomPrompts(int count = 4)
    {
        if (count < 0 || count > Prompts.Length)
        {
            throw new ArgumentOutOfRangeException(nameof(count),
                $"Count must be between 0 and {Prompts.Length}");
        }

        var rng = new Random();
        return Prompts.OrderBy(x => rng.Next()).Take(count).ToArray();
    }
}
