@page "/Bedrock"
@using Amazon.BedrockAgent
@using Amazon.BedrockAgent.Model
@using Amazon.BedrockAgentRuntime
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Components
@using Markdig
@inject MarkdownPipeline Pipeline
@inject IJSRuntime JsRuntime
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient


<MudStack Style="width: 100%">
	<MudCard>
		<MudCardContent>
			<div>
				<MudText Typo="Typo.h4">AWS Summit Bedrock</MudText>
		
@* 				<div>
					Text Model: <strong>Claude 3 Haiku (@_textModelId)</strong>
				</div>
				<div>@_knowledgeBase?.Description</div> *@
			</div>
			<br />
			<MudTimeline Reverse="true">
				@foreach (var item in _chatMessageHistory.Messages)
				{
					var label = item.Role == MessageRole.Human ? "Human" : "Assistant";
					<MudTimelineItem>
						<MudField Label="@label" Class="white-space-pre-line">
							@((MarkupString)Markdown.ToHtml(item.Content, Pipeline))
						</MudField>
					</MudTimelineItem>
				}
				<MudTimelineItem>
					<MudTextField id="PromptId" @ref="_promptField" T="string" ValueChanged="@OnPromptChanged" Label="Human"></MudTextField>
				</MudTimelineItem>
			</MudTimeline>
		</MudCardContent>
		<Progress Status="Amazon.GenAI.Models.Status.Thinking" OnClickCallback="Submit"></Progress>
	</MudCard>
</MudStack>

@code {

	#region Variables

	AmazonBedrockAgentRuntimeClient? _agentClient;

	private string? _textModelId;

	enum Status
	{
		Default,
		Thinking,
		Indexing,
		Adding
	}
	Status _status = Status.Default;

	private readonly ChatMessageHistory _chatMessageHistory = new();
	private MudTextField<string>? _promptField;

	private KnowledgeBaseSummary? _knowledgeBase;
	private List<KnowledgeBaseSummary?>? _knowledgeBases = new();
	readonly Func<KnowledgeBaseSummary, string> _selectConverter = kb => string.Concat(kb?.Name, " , (", kb?.KnowledgeBaseId, ")");

	#endregion

	protected async Task Submit()
	{

	}

	protected override async Task OnInitializedAsync()
	{
		_textModelId = "anthropic.claude-3-haiku-20240307-v1:0";
	

		await base.OnInitializedAsync();
		StateHasChanged();
	}

	private async Task OnPromptChanged(string inputValue)
	{
		if (string.IsNullOrEmpty(inputValue))
			return;

		_status = Status.Thinking;
		StateHasChanged();
		await Task.Delay(1);

		await _chatMessageHistory.AddUserMessage(inputValue);

		var bodyJson = AnthropicClaude3.CreateBodyJson(_chatMessageHistory.Messages.AsHistory());
		var response = await BedrockRuntimeClient.InvokeModelAsync(_textModelId!, bodyJson).ConfigureAwait(false);
		
		var generatedText = response["content"][0]["text"].GetValue<string>() ?? string.Empty;

		await _chatMessageHistory.AddAiMessage(generatedText!);

		await InvokeAsync(() =>
		{
			_promptField?.SetText("");
			_status = Status.Default;
			StateHasChanged();
			return Task.CompletedTask;
		});
	}



	#region Utility Methods

	private async Task Clear()
	{
		await _chatMessageHistory.Clear();
		await _promptField?.SetText("")!;
		await Task.Delay(100);
	}

	private async Task Reset(MouseEventArgs e)
	{
		await _promptField?.SetText("")!;
		await _chatMessageHistory.Clear();
	}

	#endregion
}