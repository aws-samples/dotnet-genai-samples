@page "/"
@page "/bedrock"
@using Amazon.BedrockAgent
@using Amazon.BedrockAgent.Model
@using Amazon.BedrockAgentRuntime
@using Amazon.BedrockAgentRuntime.Model
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@using Markdig
@inject MarkdownPipeline Pipeline
@inject IJSRuntime JsRuntime
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient

<style>
	.chat-container {
		height: calc(100% - 56px);
		overflow-y: auto;
	}

	.chat-messages {
		min-height: 100%;
		padding-bottom: 60px;
	}

	.input-group {
		position: fixed;
		bottom: 0;
		width: 70%;
		padding: 10px;
	}
</style>

<div class="container-fluid h-100 d-flex flex-column">
	<div class="row">
		<div class="col-12">
			<h1 class="mt-3 mb-3">Octank Contact Center</h1>
		</div>
	</div>
	<div class="row flex-grow-1">
		<div class="col-12 chat-container">
			<div class="chat-messages" id="chatMessages">
				@foreach (var item in _chatMessageHistory.Messages)
				{
					var label = item.Role == MessageRole.Human ? "Human " : "Assistant";
					@((MarkupString)Markdown.ToHtml(item.Content, Pipeline))
				}
			</div>
		</div>
	</div>
	<form id="chat" method="post" @onsubmit="OnPromptChanged">
		<div class="row">
			<div class="col-7">
				<div class="input-group">
					<input type="text" class="form-control" placeholder="Type your message..." @bind-value=@_promptField />
					@if (_status == Status.Default)
					{
						<button class="btn btn-primary" type="submit">Send</button>
					}
					<Progress Status="_status" OnClickCallback="OnPromptChanged"></Progress>
				</div>
			</div>
		</div>
	</form>
</div>

@code {
	private int modCounter = 0;

	private readonly string? _textModelId = "anthropic.claude-3-sonnet-20240229-v1:0";
	private readonly ChatMessageHistory _chatMessageHistory = new();
	public required string _promptField;
	Status _status = Status.Default;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		StateHasChanged();
	}

	protected Task Submit()
	{
		return Task.CompletedTask;
	}

	private async Task OnPromptChanged()
	{
		if (string.IsNullOrEmpty(_promptField))
			return;

		var inputValue = _promptField;

		_status = Status.Thinking;
		StateHasChanged();
		await _chatMessageHistory.AddUserMessage(inputValue);

		var bodyJson = AnthropicClaude3.CreateBodyJson(_chatMessageHistory.Messages.AsHistory());
		var response = await BedrockRuntimeClient.InvokeModelAsync(_textModelId!, bodyJson).ConfigureAwait(false);
		var generatedText = response?["content"]?[0]?["text"]?.GetValue<string>() ?? string.Empty;

		await _chatMessageHistory.AddAiMessage(generatedText!);

		await InvokeAsync(() =>
		{
			_promptField = "";
			_status = Status.Default;
			JsRuntime.InvokeVoidAsync("scrollToElement", "chat");
			StateHasChanged();
			return Task.CompletedTask;
		});
	}
}