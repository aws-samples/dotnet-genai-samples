@page "/"
@page "/bedrock"
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@using Markdig
@inject MarkdownPipeline Pipeline
@inject IJSRuntime JsRuntime
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient


<div class="container-fluid h-100 d-flex flex-column">
	<div class="row">
		<div class="col-12">
			<h1 class="mt-3 mb-3">Octank Contact Center</h1>
		</div>
	</div>
    <div class="row flex-grow-1">
        <div class="col-12 chat-container">
            <div class="chat-messages" id="chatMessages">
                @if (_chatMessageHistory.Messages.Count > 0)
                {
                    @foreach (var item in _chatMessageHistory.Messages)
                    {
                        var label = item.Role == MessageRole.Human ? "human" : "bot";

                        <div class="message-wrapper @label-wrapper">
                            <div class="timestamp">@item.DateTime.ToLongTimeString()</div>
                            <div class="message @label-message">
                                @((MarkupString)Markdown.ToHtml(item.Content, Pipeline))
                            </div>
                        </div>
                    }
                }
                else
                {
                    <h2>
                        <i>
                            Hello, how can I help you?
                        </i>
                    </h2>
                }
            </div>
        </div>
        <div id="chat"></div>
    </div>

    <EditForm Model="@_chatMessageHistory" OnSubmit="OnPromptChanged">
        <div class="row flex-grow-1">
            <div class="col-7">
                <div class="input-wrapper">
                    <MudPaper Elevation="5" Class="mb-2">
                        <MudToolBar>
                            <MudIconButton Icon="@Icons.Material.Outlined.Search" Color="Color.Inherit" Class="mr-5" />
                            <MudTextField T="string" @ref="_promptField" Label="Type your message..." Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                            <Progress Status="_status" OnClickCallback="OnPromptChanged"></Progress>
                        </MudToolBar>
                    </MudPaper>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
	private readonly string? _textModelId = "anthropic.claude-3-sonnet-20240229-v1:0";
	private readonly ChatMessageHistory _chatMessageHistory = new();
    private MudTextField<string>? _promptField;
    Status _status = Status.Default;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		StateHasChanged();
	}

	private async Task OnPromptChanged()
	{
		if (string.IsNullOrEmpty(_promptField?.Value))
			return;

		_status = Status.Thinking;
		StateHasChanged();
        await _chatMessageHistory.AddUserMessage(_promptField.Value);

		var bodyJson = AnthropicClaude3.CreateBodyJson(_chatMessageHistory.Messages.AsHistory());
		var response = await BedrockRuntimeClient.InvokeModelAsync(_textModelId!, bodyJson).ConfigureAwait(false);
		var generatedText = response?["content"]?[0]?["text"]?.GetValue<string>() ?? string.Empty;

		await _chatMessageHistory.AddAiMessage(generatedText!);

		await InvokeAsync(() =>
		{
            _promptField?.SetText("");
            _status = Status.Default;
			JsRuntime.InvokeVoidAsync("scrollToElement", "chat");
			StateHasChanged();
			return Task.CompletedTask;
		});
	}
}