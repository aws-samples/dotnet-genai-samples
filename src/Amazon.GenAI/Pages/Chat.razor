@page "/"
@page "/chat"
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@inject IJSRuntime JsRuntime
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient


<div class="container-fluid h-100 d-flex flex-column">
    <div class="row">
        <div class="col-12">
            <h1 class="mt-3 mb-3">Octank Contact Center</h1>
        </div>
    </div>
    <MessageHistory History="_chatMessageHistory"></MessageHistory>
</div>

    
<div class="input-wrapper">
    <Prompt Model="_chatMessageHistory"
            OnPromptChanged="PromptChanged"
            Status="_status">
    </Prompt>
</div>

@code {
    private const string TextModelId = "anthropic.claude-3-haiku-20240307-v1:0";

    private readonly ChatMessageHistory _chatMessageHistory = new();
    Status _status = Status.Default;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task PromptChanged(string prompt)
    {
        if (string.IsNullOrEmpty(prompt))
            return;

        _status = Status.Thinking;
        StateHasChanged();
        await _chatMessageHistory.AddUserMessage(prompt);

        var bodyJson = AnthropicClaude3.CreateBodyJson(_chatMessageHistory.Messages.AsHistory());
        var response = await BedrockRuntimeClient.InvokeModelAsync(TextModelId, bodyJson).ConfigureAwait(false);
        var generatedText = response?["content"]?[0]?["text"]?.GetValue<string>() ?? string.Empty;

        await _chatMessageHistory.AddAiMessage(generatedText!);

        await InvokeAsync(() =>
        {
            _status = Status.Default;
            StateHasChanged();
            JsRuntime.InvokeVoidAsync("scrollToElement", "chatMessages");
            return Task.CompletedTask;
        });
    }
}