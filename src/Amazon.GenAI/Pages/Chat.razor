@page "/"
@page "/chat"
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@inject IJSRuntime JsRuntime
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient

<style>
    .container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 40vh;
            background-color: #f0f0f0;
        }
     .centered-div {
            color: black;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 18px;
            border-radius: 10px;
            text-align:center;
        }
        .rounded-border{
             border: 1px solid #000;
            border-radius: 20px;
            margin: 0 15px 0 0;
        }
</style>
<div class="container-fluid h-100 d-flex flex-column">
    <MessageHistory History="_messageHistory"></MessageHistory>
</div>

<div class="container">
    <div class="centered-div">
        <div class="row">
            <div class="col-2"></div>
            <div class="col-2 rounded-border">
                here's one question
            </div>
            <div class="col-2 rounded-border">
                here's one question
            </div>
            <div class="col-2 rounded-border">
                here's one question
            </div>
            <div class="col-2 rounded-border">
                here's one question
            </div>
            <div class="col-2"></div>
        </div>
    </div>
</div>

<div class="input-wrapper">
    <Prompt Model="_messageHistory"
            OnPromptChanged="PromptChanged"
            Status="_status">
    </Prompt>
</div>

@code {
    private const string TextModelId = "anthropic.claude-3-haiku-20240307-v1:0";

    private readonly ChatMessageHistory _messageHistory = new();
    Status _status = Status.Default;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task PromptChanged(string prompt)
    {
        if (string.IsNullOrEmpty(prompt)) return;

        _status = Status.Thinking;
        await _messageHistory.AddUserMessage(prompt);

        var bodyJson = AnthropicClaude3.CreateBodyJson(_messageHistory.Messages.AsHistory());
        var response = await BedrockRuntimeClient.InvokeModelAsync(TextModelId, bodyJson).ConfigureAwait(false);
        var generatedText = response?["content"]?[0]?["text"]?.GetValue<string>() ?? string.Empty;

        await _messageHistory.AddAiMessage(generatedText!);

        await InvokeAsync(() =>
        {
            _status = Status.Default;
            StateHasChanged();
            JsRuntime.InvokeVoidAsync("scrollToElement", "chatMessages");
            return Task.CompletedTask;
        });
    }
}