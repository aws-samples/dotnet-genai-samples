@page "/image-search-playground"
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.OpenSearch
@using Amazon.OpenSearchServerless
@using Amazon.OpenSearchServerless.Model
@using Markdig
@inject MarkdownPipeline Pipeline
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4">Image Search Playground</MudText>
<MudStack Style="width: 100%">
    <MudCard>
        <MudCardContent>
            <div>
                <MudSelect T="CollectionSummary" @bind-Value="_collection" ToStringFunc="@_selectConverter" Required="true"
                           Label="Select OpenSearchServerless Collections"
                           Variant="Variant.Outlined">
                    @if (_collections != null)
                    {
                        @foreach (var item in _collections)
                        {
                            _collection ??= item;
                            <MudSelectItem Value="@item" />
                        }
                    }
                </MudSelect>
            </div>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                           @bind-Files="Files"
                           Accept=".bmp,.gif,.jpg,.jpeg,.png,.tiff"
                           OnFilesChanged="OnInputFileChanged"
                           For="@(() => Files)"
                           Hidden="false" Class="flex-1"
                           MaximumFileCount="50"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="100px" Outlined="true" Class="@_dragClass">
                        <MudText Typo="Typo.h6">Drag and drop image file here or click</MudText>
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>

            <div class="container text-center">
                <div class="row">
                    @for (var i = 0; i < _imageDataUrls.Count; i++)
                    {
                        var file = _loadedFiles.ElementAt(i);
                        var imageDataUrl = _imageDataUrls[i];
                        <div class="col">
                            <img width="400px" src="@imageDataUrl" />
                            <div>
                                <MudChip T="string" Color="Color.Dark" Text="@file.Key" />
                            </div>
                        </div>
                    }
                </div>
            </div>

            <EditForm Model="@_chatMessageHistory" OnSubmit="OnSubmit">
                <MudCard>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                        <MudButton OnClick="Clear" Disabled="@(!_loadedFiles.Any())" Color="Color.Error" Variant="Variant.Filled" Class="ms-3">Clear</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="9">
                    Claude 3.5 Sonnet (@_textModelId)
                </MudItem>
            </MudGrid>
            <MudCardContent>
                <MudTextField @ref="_promptField" T="string" ValueChanged="@OnPromptChanged"
                              Label="Human" Lines=5 Variant="Variant.Outlined"></MudTextField>
            </MudCardContent>
            <MudCardActions>
                <MudButton Class="ml-auto" Disabled="@(_status > Status.Default)" Variant="Variant.Filled"
                           Color="Color.Primary" OnClick="Submit">
                    @switch (_status)
                    {
                        case Status.Thinking:
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Thinking...</MudText>
                            break;

                        case Status.Indexing:
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Indexing Database...</MudText>
                            break;

                        case Status.Adding:
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Adding Documents...</MudText>
                            break;

                        case Status.Default:
                        default:
                            <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Forward" Size="Size.Small"></MudIcon>
                            <MudText Class="ms-2">Query</MudText>
                            break;
                    }
                </MudButton>
            </MudCardActions>
        </MudCardContent>
    </MudCard>

    <div class="container text-center">
        <div class="row">
            @foreach (var imageSrc in _listBase64Images)
            {
                <div class="col">
                    <img width="400px" src="@imageSrc" />
                </div>
            }
        </div>
    </div>
</MudStack>

@code {

    #region Variables

    readonly Func<CollectionSummary, string> _selectConverter = coll => string.Concat(coll?.Name, " , (", coll?.Id, ")");
    private CollectionSummary? _collection;
    private List<CollectionSummary?>? _collections;

    IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    private readonly List<string> _imageDataUrls = new();

    private string? _textModelId;
    private string? _embeddingModelId;

    private string? _indexName;
    private const int Dimensions = 1024;

    private readonly List<byte[]> _savedBytesList = new();
    private readonly HashSet<string> _listBase64Images = new();

    enum Status
    {
        Default,
        Thinking,
        Indexing,
        Adding
    }
    Status _status = Status.Default;

    private readonly ChatMessageHistory _chatMessageHistory = new();
    private MudTextField<string>? _promptField;

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private Dictionary<string, string> _loadedFiles = new();

    private string? _uploadDirectory;

    private OpenSearchServerlessVectorStore? _openSearchVectorStore;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        _textModelId = "anthropic.claude-3-sonnet-20240229-v1:0";
        _embeddingModelId = "amazon.titan-embed-image-v1";
        _indexName = "my-images-index";

        _uploadDirectory = Path.Combine(Path.GetTempPath(), "unsafe_uploads");
        if (Directory.Exists(_uploadDirectory) == false) Directory.CreateDirectory(_uploadDirectory);

        _collections = (await new AmazonOpenSearchServerlessClient().ListCollectionsAsync(new ListCollectionsRequest()))
            .CollectionSummaries
            .ToList();

        var options = new OpenSearchVectorStoreOptions
            {
                Region = RegionEndpoint.USEast1,
                IndexName = _indexName,
                Dimensions = Dimensions,
                CollectionArn = _collections[0]?.Arn,
            };

        _openSearchVectorStore = new OpenSearchServerlessVectorStore(BedrockRuntimeClient, _embeddingModelId, _textModelId, options);

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnSubmit(EditContext context)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        await InvokeAsync(() =>
        {
            _status = Status.Adding;
            StateHasChanged();
        });

        await _openSearchVectorStore!.AddDocumentsAsync(_loadedFiles, _savedBytesList).ConfigureAwait(false);
        await InvokeAsync(() =>
        {
            _status = Status.Default;
            StateHasChanged();
        });
    }

    private async Task OnPromptChanged(string question)
    {
        if (string.IsNullOrEmpty(question))
            return;

        _listBase64Images.Clear();
        _status = Status.Thinking;
        StateHasChanged();

        var embeddingModel = new EmbeddingModel(BedrockRuntimeClient, _embeddingModelId);
        var questionEmbeddingsResponse = await embeddingModel.CreateEmbeddingsAsync(question)!;
        var embedding = questionEmbeddingsResponse?["embedding"]?.AsArray();
        var f = new float[Dimensions];
        for (var i = 0; i < embedding!.Count; i++)
        {
            f[i] = (float)embedding[i]?.AsValue()!;
        }

        var documents = await _openSearchVectorStore!.SimilaritySearchByVectorAsync(f, 2).ConfigureAwait(false);
        foreach (var vectorRecord in documents)
        {
            _listBase64Images.Add($"data:image/png;base64,{vectorRecord.Base64}");
        }

        await InvokeAsync(() =>
        {
            _promptField?.SetText("");
            _status = Status.Default;
            JsRuntime.InvokeVoidAsync("scrollToElement", "PromptId");

            StateHasChanged();
            return Task.CompletedTask;
        });
    }

    #region Utility Methods

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _loadedFiles.Clear();
        _imageDataUrls.Clear();
        _savedBytesList.Clear();

        const long maxFileSize = 1024L * 1024L * 1024L * 2L;

        foreach (var inputFile in e.GetMultipleFiles())
        {
            var targetFile = Path.Combine(_uploadDirectory!, inputFile.Name);
            var file = await inputFile.RequestImageFileAsync(inputFile.ContentType, 600, int.MaxValue);

            await using var outputStream = File.Create(targetFile);
            await file.OpenReadStream(maxFileSize).CopyToAsync(outputStream);
            outputStream.Close();

            var bytes = await File.ReadAllBytesAsync(targetFile);
            _savedBytesList.Add(bytes);
            var base64String = Convert.ToBase64String(bytes);

            _imageDataUrls.Add($"data:image/png;base64,{base64String}");

            _loadedFiles.Add(inputFile.Name, targetFile);
        }
    }

    private async Task Clear()
    {
        _loadedFiles.Clear();
        _imageDataUrls.Clear();
        _savedBytesList.Clear();
        await _chatMessageHistory.Clear();
        ClearDragClass();
        await _promptField?.SetText("")!;
        await Task.Delay(100);
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

    private async Task Submit(MouseEventArgs e)
    {
        await _promptField?.SetText("")!;
        _loadedFiles = new();
    }

    #endregion
}