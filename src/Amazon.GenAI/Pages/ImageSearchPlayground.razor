@page "/image-search-playground"
@using System.Net
@using System.Text.Json
@using Amazon.BedrockRuntime
@using Amazon.DynamoDBv2
@using Amazon.DynamoDBv2.Model
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.OpenSearch
@using Amazon.OpenSearchServerless
@using Amazon.OpenSearchServerless.Model
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@using Amazon.S3.Model
@using Amazon.S3.Transfer
@using Markdig
@using Amazon.S3
@using Amazon.EventBridge
@using Amazon.EventBridge.Model
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject IJSRuntime JsRuntime

<MudText Typo="Typo.h4">Green Basket</MudText>
<MudStack Style="width: 100%">
	<MudCard>
		<MudCardContent>
			<div>
				<MudSelect T="CollectionSummary" @bind-Value="_collection" ToStringFunc="@_selectConverter" Required="true"
						   Label="Select OpenSearchServerless Collections"
						   Variant="Variant.Outlined">
					@if (_collections != null)
					{
						@foreach (var item in _collections)
						{
							_collection ??= item;
							<MudSelectItem Value="@item" />
						}
					}
				</MudSelect>
			</div>
		</MudCardContent>
	</MudCard>

	<MudRadioGroup @bind-Value="_actionType">
		<MudRadio Value="ActionType.Searching" Color="Color.Primary">Search</MudRadio>
		<MudRadio Value="ActionType.Adding" Color="Color.Secondary">Add Images from My Computer</MudRadio>
		<MudRadio Value="ActionType.S3Adding" Color="Color.Secondary">Add Images from S3</MudRadio>
	</MudRadioGroup>

	@if (_actionType == ActionType.Searching)
	{
		<MudPaper Elevation="5" Class="mb-2">
			<MudToolBar>
				<MudIconButton Icon="@Icons.Material.Outlined.Search" Color="Color.Inherit" Class="mr-5" />
				<MudRadioGroup @bind-Value="SearchType">
					<MudRadio Value="true" Color="Color.Primary">Text</MudRadio>
					<MudRadio Value="false" Color="Color.Secondary">Image</MudRadio>
				</MudRadioGroup>
				@if (SearchType)
				{
					<MudAutocomplete T="string" Class="mt-n4" Label="Search Text" SearchFunc="@Search" ShowProgressIndicator="true" />
				}
				else
				{
					<MudPaper Class="pl-2 pr-2" Outlined="true">
						<Uploader Accept=".bmp,.gif,.jpg,.jpeg,.png,.tiff"
								  Files="QueryImages"
								  FileCount="1"
								  OnFileChangedCallback="OnInputFileChanged">
						</Uploader>
					</MudPaper>
				}
			</MudToolBar>
			@if (SearchType == false)
			{
				<ImageListing ActionType="_actionType"
							  SearchType="SearchType"
							  ImageUrls="_imageDataUrls"
							  Files="_inputFiles"
							  Width="200">
				</ImageListing>

				<EditForm Model="@_chatMessageHistory" OnSubmit="OnImageSearch">
					<MudCard>
						<MudCardActions>
							<MudButton ButtonType="ButtonType.Submit" Disabled="@(!_inputFiles.Any())" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search</MudButton>
							<MudButton OnClick="Clear" Disabled="@(!_inputFiles.Any())" Color="Color.Error" Variant="Variant.Filled" Class="ms-3">Reset</MudButton>
						</MudCardActions>

						<Progress Status="_status" OnClickCallback="Submit"></Progress>
					</MudCard>
				</EditForm>
			}
		</MudPaper>

		<MudExpansionPanels>
			<MudExpansionPanel Text="@_totalImages" ExpandedChanged="OnExpandedChanged" @ref="_expansionPanels">
				<div class="container text-center">
					<ImageListing ActionType="_actionType"
								  SearchType="SearchType"
								  SearchResults="SearchResults"
								  Width="400">
					</ImageListing>
					<MudPagination BoundaryCount="1" MiddleCount="1" Count="@(_pageCount+1)" SelectedChanged="PageChanged" />
				</div>
			</MudExpansionPanel>
		</MudExpansionPanels>

		<EditForm Model="@_chatMessageHistory" OnSubmit="OnDelete">
			<MudButton ButtonType="ButtonType.Submit" Disabled="@(SearchResults?.Count == 0)" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Delete All</MudButton>
		</EditForm>
	}

	@if (_actionType == ActionType.Adding)
	{
        <MudPaper Elevation="5" Class="p-3">
            <MudRadioGroup @bind-Value="_modalType">
                <MudRadio Value="ModalType.Text" Color="Color.Primary">Text Embeddings</MudRadio>
                <MudRadio Value="ModalType.Image" Color="Color.Secondary">Video Embeddings</MudRadio>
				<MudRadio Value="ModalType.TextAndImage" Color="Color.Secondary">Text and Image Embeddings</MudRadio>
            </MudRadioGroup>

            <Uploader Accept=".bmp,.gif,.jpg,.jpeg,.png,.tiff"
                      Files="Files"
                      FileCount="100"
                      OnFileChangedCallback="OnInputFileChanged">
            </Uploader>
        </MudPaper>

		<ImageListing ActionType="_actionType"
					  SearchType="SearchType"
					  ImageUrls="_imageDataUrls"
                      Files="_inputFiles"
					  ShowRelevance="true"
					  Width="400">
		</ImageListing>

		<EditForm Model="@_chatMessageHistory" OnSubmit="OnSubmit">
			<MudCard>
				<MudCardActions>
					<MudButton ButtonType="ButtonType.Submit" Disabled="@(!_inputFiles.Any())" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add Images</MudButton>
					<MudButton OnClick="Clear" Disabled="@(!_inputFiles.Any())" Color="Color.Error" Variant="Variant.Filled" Class="ms-3">Clear</MudButton>
				</MudCardActions>

				<Progress Status="_status" OnClickCallback="Submit"></Progress>
			</MudCard>
		</EditForm>
	}

	@if (_actionType == ActionType.S3Adding)
	{

		<MudPaper Elevation="5" Class="p-3">
            <div>
                <MudRadioGroup @bind-Value="_modalType">
                    <MudRadio Value="ModalType.Text" Color="Color.Primary">Text Embeddings</MudRadio>
                    <MudRadio Value="ModalType.Image" Color="Color.Secondary">Video Embeddings</MudRadio>
                    <MudRadio Value="ModalType.TextAndImage" Color="Color.Secondary">Text and Image Embeddings</MudRadio>
                </MudRadioGroup>

                <MudRadioGroup @bind-Value="_actionType">
                    <MudRadio Value="ActionType.Searching" Color="Color.Primary">Search</MudRadio>
                    <MudRadio Value="ActionType.Adding" Color="Color.Secondary">Add Images from My Computer</MudRadio>
                    <MudRadio Value="ActionType.S3Adding" Color="Color.Secondary">Add Images from S3</MudRadio>
                </MudRadioGroup>

                <MudSelect T="S3Bucket" @bind-Value="_bucket" Required="true"
                           Label="Select S3 Bucket"
                           Variant="Variant.Outlined">
                    @if (_buckets != null)
                    {
                        @foreach (var item in _buckets)
                        {
                            _bucket ??= item;
                            <MudSelectItem Value="@item">@item?.BucketName</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
		</MudPaper>

		<EditForm Model="@_chatMessageHistory" OnSubmit="OnS3Submit">
			<MudCard>
				<MudCardActions>
					<MudButton ButtonType="ButtonType.Submit" Disabled="@(_bucket is null)" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add Images from S3</MudButton>
				</MudCardActions>

				<Progress Status="_status" OnClickCallback="Submit"></Progress>
			</MudCard>
		</EditForm>
	}
</MudStack>

@code {

	#region Variables

	private const string NamePrefix = "dotnet-genai";

	readonly Func<CollectionSummary, string> _selectConverter = coll => string.Concat(coll?.Name, " , (", coll?.Id, ")");
	private CollectionSummary? _collection;
	private List<CollectionSummary?>? _collections;
	private OpenSearchServerlessVectorStore? _openSearchVectorStore;
	private string? _indexName;
	private const int Dimensions = 1024;

	private string? _uploadDirectory;
	IReadOnlyList<IBrowserFile>? Files { get; } = new List<IBrowserFile>();
	private readonly List<string> _imageDataUrls = new();

	private string? _textModelId;
	private string? _embeddingModelId;

	private readonly List<byte[]> _savedBytesList = new();
	public required IReadOnlyCollection<VectorSearchResponse>? SearchResults = new List<VectorSearchResponse>();

	Status _status = Status.Default;

	private readonly ChatMessageHistory _chatMessageHistory = new();

	private Dictionary<string, string> _inputFiles = new();

	private readonly int _pageSize = 15;
	string? _totalImages;
	private int _pageCount;

	private MudExpansionPanel? _expansionPanels;

	public bool SearchType { get; set; } = true;
	IReadOnlyList<IBrowserFile>? QueryImages { get; } = new List<IBrowserFile>();

	private ActionType _actionType;

	private List<S3Bucket?>? _buckets;
	private S3Bucket? _bucket;

    private ModalType _modalType;


	#endregion

	protected override async Task OnInitializedAsync()
	{
		_textModelId = "anthropic.claude-3-5-sonnet-20240620-v1:0";
		_embeddingModelId = "amazon.titan-embed-image-v1";
		_indexName = "my-images-index";

		_uploadDirectory = Path.Combine(Path.GetTempPath(), "unsafe_uploads");
		if (Directory.Exists(_uploadDirectory) == false) Directory.CreateDirectory(_uploadDirectory);

		_collections = (await new AmazonOpenSearchServerlessClient().ListCollectionsAsync(new ListCollectionsRequest()))
			.CollectionSummaries
			.Where(x => x.Name.StartsWith(NamePrefix))
			.ToList();

		_buckets = (await new AmazonS3Client().ListBucketsAsync()).Buckets.ToList();

		var regionEndpoint = RegionEndpoint.GetBySystemName(Constants.Region);
		var options = new OpenSearchVectorStoreOptions
			{
				Region = regionEndpoint,
				IndexName = _indexName,
				Dimensions = Dimensions,
				CollectionArn = _collections[0]?.Arn,
			};

		_openSearchVectorStore = new OpenSearchServerlessVectorStore(BedrockRuntimeClient, _embeddingModelId, _textModelId, options);

		await GetAll();

		await base.OnInitializedAsync();
		StateHasChanged();
	}

	private async Task OnSubmit(EditContext context)
	{
		var client = new AmazonS3Client();
		var bucket = (await client.ListBucketsAsync()).Buckets.FirstOrDefault(x => x.BucketName.StartsWith("dotnet-genai-source"));

		await InvokeAsync(() =>
		{
			_status = Status.Adding;

			if (bucket == null) return;

			foreach (var path in _inputFiles.Select(file => file.Value))
			{
				var transferUtility = new TransferUtility(client);

				var transferUtilityUploadRequest = new TransferUtilityUploadRequest
				{
					BucketName = bucket?.BucketName,
					Key = Path.GetFileName(path),
					FilePath = path,
					ContentType = "text/plain",
				};
				transferUtilityUploadRequest.Metadata.Add("modalType", Enum.GetName(typeof(ModalType), _modalType));

				transferUtility.UploadAsync(transferUtilityUploadRequest);
			}

			StateHasChanged();
		});

		await InvokeAsync(() =>
		{
			_expansionPanels?.Collapse();
			_ = Clear();
			_ = GetAll();
			_status = Status.Default;
			StateHasChanged();
			return Task.CompletedTask;
		});
	}

	private async Task OnS3Submit(EditContext context)
	{
		var client = new AmazonEventBridgeClient();

		await InvokeAsync(() =>
		{
			_status = Status.Adding;

			var request = new PutEventsRequest
				{
					Entries =
					[
						new()
						{
							Source = $"com.{NamePrefix}.imageingestion",
							DetailType = "ProcessExistingBucket",
							Detail = JsonSerializer.Serialize(new
							{
								bucketName = _bucket?.BucketName
							})
						}
					]
				};

			Task<PutEventsResponse>? response = client.PutEventsAsync(request);

			StateHasChanged();
		});

		await InvokeAsync(() =>
		{
			_expansionPanels?.Collapse();
			_ = Clear();
			_ = GetAll();
			_status = Status.Default;
			StateHasChanged();
			return Task.CompletedTask;
		});
	}

	private async Task OnImageSearch(EditContext context)
	{
		await InvokeAsync(() =>
		{
			_status = Status.Thinking;
			StateHasChanged();
		});

		SearchResults = await _openSearchVectorStore!.QueryImageDocumentsAsync(_inputFiles, _savedBytesList).ConfigureAwait(false);

		await InvokeAsync(() =>
		{
			_expansionPanels?.Expand();

			_status = Status.Default;
			JsRuntime.InvokeVoidAsync("scrollToElement", "PromptId");

			StateHasChanged();
			return Task.CompletedTask;
		});
	}

	private async Task OnDelete(EditContext obj)
	{
		await _openSearchVectorStore?.DeleteIndex(_indexName)!;

		const string nameSuffix = "test";
		const string tableName = $"{NamePrefix}-dynamo-table-{nameSuffix}";
		await DeleteAllItemsInTable(tableName);
	}

	private async Task<IEnumerable<string>?> Search(string question)
	{
		if (string.IsNullOrEmpty(question))
		{
			await GetAll();
			return null;
        }

		_status = Status.Thinking;
		StateHasChanged();

		var embeddingModel = new EmbeddingModel(BedrockRuntimeClient, _embeddingModelId);
		var questionEmbeddingsResponse = await embeddingModel.CreateEmbeddingsAsync(question)!;
		var embedding = questionEmbeddingsResponse?["embedding"]?.AsArray();
		var f = new float[Dimensions];
		for (var i = 0; i < embedding!.Count; i++)
		{
			f[i] = (float)embedding[i]?.AsValue()!;
		}

		SearchResults = (List<VectorSearchResponse>)await _openSearchVectorStore!.SimilaritySearchByVectorAsync(f, 5).ConfigureAwait(false);

		await InvokeAsync(() =>
		{
			_expansionPanels?.Expand();

			_status = Status.Default;
			JsRuntime.InvokeVoidAsync("scrollToElement", "PromptId");

			StateHasChanged();
			return Task.CompletedTask;
		});

		return null;
	}

	#region Utility Methods

	private async Task GetAll()
	{
		(SearchResults, var totalHits) = await _openSearchVectorStore?.GetAllAsync(pageSize: _pageSize, pageNumber: 1)!;
		_totalImages = $"{totalHits.ToString()} # of Images";
		_pageCount = (int)(totalHits / _pageSize);
	}

	private async Task OnInputFileChanged(InputFileChangeEventArgs e)
	{
		_inputFiles.Clear();
		_imageDataUrls.Clear();
		_savedBytesList.Clear();

		const long maxFileSize = 1024L * 1024L * 1024L * 2L;

		foreach (var inputFile in e.GetMultipleFiles())
		{
			var targetFile = Path.Combine(_uploadDirectory!, inputFile.Name);
			var file = await inputFile.RequestImageFileAsync(inputFile.ContentType, 600, int.MaxValue);

			await using var outputStream = File.Create(targetFile);
			await file.OpenReadStream(maxFileSize).CopyToAsync(outputStream);
			outputStream.Close();

			var bytes = await File.ReadAllBytesAsync(targetFile);
			_savedBytesList.Add(bytes);
			var base64String = Convert.ToBase64String(bytes);

			_imageDataUrls.Add($"data:image/png;base64,{base64String}");

			_inputFiles.Add(inputFile.Name, targetFile);
		}
	}

	private async Task Clear()
	{
		_inputFiles.Clear();
		_imageDataUrls.Clear();
		_savedBytesList.Clear();
		await _chatMessageHistory.Clear();
		await Task.Delay(100);
	}

	private Task Submit(MouseEventArgs e)
	{
		_inputFiles = new();
		return Task.CompletedTask;
	}

	private async Task PageChanged(int i)
	{
		(SearchResults, var totalHits) = await _openSearchVectorStore?.GetAllAsync(pageSize: _pageSize, pageNumber: i)!;
		_totalImages = $"{totalHits.ToString()} # of Images";
		_pageCount = (int)(totalHits / _pageSize + 1);
	}

	public async Task DeleteAllItemsInTable(string tableName)
	{
		var client = new AmazonDynamoDBClient();

		try
		{
			var list = (await client.ListTablesAsync()).TableNames.Where(x => x.StartsWith(NamePrefix)).ToList();

			foreach (var name in list)
			{
				Console.WriteLine($"Processing table: {name}");
				// First, we need to get the table's key schema
				var tableDescription = await client.DescribeTableAsync(name);
				var keySchema = tableDescription.Table.KeySchema;

				// Scan the table to get all items
				var scanRequest = new ScanRequest
				{
					TableName = name
				};
				var scanResponse = await client.ScanAsync(scanRequest);

				// Delete each item
				foreach (var item in scanResponse.Items)
				{
					var key = new Dictionary<string, AttributeValue>();
					foreach (var schemaElement in keySchema)
					{
						key[schemaElement.AttributeName] = item[schemaElement.AttributeName];
					}

					var deleteRequest = new DeleteItemRequest
					{
						TableName = name,
						Key = key
					};

					var deleteItemResponse = await client.DeleteItemAsync(deleteRequest);
					Console.WriteLine($"deleteItemResponse.HttpStatusCode: {deleteItemResponse.HttpStatusCode}");

					if (deleteItemResponse.HttpStatusCode == HttpStatusCode.OK)
					{
						Console.WriteLine($"Deleted item of count: {item.Count} successfully.");
					}
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error deleting items: {ex.Message}");
		}
	}

	#endregion
}