@page "/knowledgebase"
@using Amazon.BedrockAgent
@using Amazon.BedrockAgent.Model
@using Amazon.BedrockAgentRuntime
@using Amazon.BedrockAgentRuntime.Model
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@inject IJSRuntime JsRuntime
@inject AmazonBedrockAgentClient AgentClient;
@inject AmazonBedrockAgentRuntimeClient AgentRuntimeClient;


<div class="container-fluid h-100 d-flex flex-column" style="position:relative !important">
    <div class="row">
        <div class="col-12">
            <h1 class="mt-3 mb-3">Octank Contact Center</h1>
        </div>
        <MessageHistory History="_chatMessageHistory"></MessageHistory>
    </div>
</div>

<div class="input-wrapper">
    <Prompt Model="_chatMessageHistory"
            OnPromptChanged="PromptChanged"
            Status="_status">
    </Prompt>
</div>

@code {

    private const string TextModelId = "anthropic.claude-3-haiku-20240307-v1:0";
    private const string DocumentPrefix = "fictitious";

    private readonly ChatMessageHistory _chatMessageHistory = new();
    Status _status = Status.Default;

    private KnowledgeBaseSummary? _knowledgeBase;
    private List<KnowledgeBaseSummary?>? _knowledgeBases = new();

    protected override async Task OnInitializedAsync()
    {
        var knowledgeBasesRequest = new ListKnowledgeBasesRequest();

        _knowledgeBases = (await AgentClient.ListKnowledgeBasesAsync(knowledgeBasesRequest)).KnowledgeBaseSummaries
            .OrderBy(x => x.UpdatedAt)
            .Where(x => x.Status.Equals("Active"))
            .ToList();

        _knowledgeBase = _knowledgeBases.FirstOrDefault(x => x.Name.StartsWith(DocumentPrefix, StringComparison.OrdinalIgnoreCase));

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task PromptChanged(string prompt)
    {
        if (string.IsNullOrEmpty(prompt))
            return;

        _status = Status.Thinking;
        StateHasChanged();
        await _chatMessageHistory.AddUserMessage(prompt);

        try
        {
            var request = new RetrieveAndGenerateRequest
                {
                    Input = new RetrieveAndGenerateInput { Text = prompt },
                    RetrieveAndGenerateConfiguration = new RetrieveAndGenerateConfiguration
                    {
                        Type = RetrieveAndGenerateType.KNOWLEDGE_BASE,
                        KnowledgeBaseConfiguration = new KnowledgeBaseRetrieveAndGenerateConfiguration
                        {
                            KnowledgeBaseId = _knowledgeBase?.KnowledgeBaseId,
                            ModelArn = TextModelId,
                            RetrievalConfiguration = new KnowledgeBaseRetrievalConfiguration
                            {
                                VectorSearchConfiguration = new KnowledgeBaseVectorSearchConfiguration
                                {
                                    OverrideSearchType = "HYBRID"
                                }
                            }
                        }
                    }
                };

            var result = await AgentRuntimeClient!.RetrieveAndGenerateAsync(request);

            await _chatMessageHistory.AddAiMessage(result.Output.Text!);
        }
        catch (AmazonBedrockAgentRuntimeException ex)
        {
            Console.WriteLine($"AWS Error: {ex.Message}");
            throw;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General Error: {ex.Message}");
            throw;
        }

        await InvokeAsync(() =>
        {
            _status = Status.Default;
            StateHasChanged();
            JsRuntime.InvokeVoidAsync("scrollToElement", "chatMessages");
            return Task.CompletedTask;
        });
    }
}