@page "/knowledgebase"
@inherits PageBase
@using Amazon.BedrockAgent
@using Amazon.BedrockAgent.Model
@using Amazon.BedrockAgentRuntime
@using Amazon.BedrockAgentRuntime.Model
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@inject AmazonBedrockAgentClient AgentClient
@inject AmazonBedrockAgentRuntimeClient AgentRuntimeClient


<div class="container-fluid h-100 d-flex flex-column">
    <MessageHistory History="MessageHistory"></MessageHistory>
</div>

<div class="input-wrapper">
    <Prompt Model="MessageHistory"
            OnPromptChanged="PromptChanged"
            BuiltinPrompt="@BuiltinPrompt"
            Status="Status">
    </Prompt>
</div>

@code {

    private KnowledgeBaseSummary? _knowledgeBase;
    private List<KnowledgeBaseSummary?>? _knowledgeBases = [];

    protected override async Task OnInitializedAsync()
    {
        _knowledgeBases = (await AgentClient.ListKnowledgeBasesAsync(new ListKnowledgeBasesRequest())).KnowledgeBaseSummaries
            .OrderBy(x => x.UpdatedAt)
            .Where(x => x.Status.Value.Equals("Active", StringComparison.OrdinalIgnoreCase))
            .ToList();

        _knowledgeBase = _knowledgeBases.FirstOrDefault(x => x != null &&
                                                             x.Name.StartsWith(Constants.KnowledgeBaseName, StringComparison.OrdinalIgnoreCase));
        
        await base.OnInitializedAsync();
    }

    private async Task PromptChanged(string prompt)
    {
        BuiltinPrompt = prompt;

        if (string.IsNullOrEmpty(prompt)) return;

        Status = Status.Thinking;
        await MessageHistory.AddUserMessage(prompt);

        try
        {
            var request = new RetrieveAndGenerateRequest
                {
                    Input = new RetrieveAndGenerateInput { Text = prompt },
                    RetrieveAndGenerateConfiguration = new RetrieveAndGenerateConfiguration
                    {
                        Type = RetrieveAndGenerateType.KNOWLEDGE_BASE,
                        KnowledgeBaseConfiguration = new KnowledgeBaseRetrieveAndGenerateConfiguration
                        {
                            KnowledgeBaseId = _knowledgeBase?.KnowledgeBaseId,
                            ModelArn = Constants.TextModelId,
                            RetrievalConfiguration = new KnowledgeBaseRetrievalConfiguration
                            {
                                VectorSearchConfiguration = new KnowledgeBaseVectorSearchConfiguration
                                {
                                    OverrideSearchType = "HYBRID"
                                }
                            }
                        }
                    }
                };

            var result = await AgentRuntimeClient!.RetrieveAndGenerateAsync(request);

            await MessageHistory.AddAiMessage(result.Output.Text!);
        }
        catch (AmazonBedrockAgentRuntimeException ex)
        {
            Console.WriteLine($"AWS Error: {ex.Message}");
            throw;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General Error: {ex.Message}");
            throw;
        }

        await UpdatePage();
    }
}
