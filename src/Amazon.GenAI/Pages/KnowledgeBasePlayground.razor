@page "/knowledgeBase"
@using Amazon.BedrockAgent
@using Amazon.BedrockAgent.Model
@using Amazon.BedrockAgentRuntime
@using Amazon.BedrockAgentRuntime.Model
@using Amazon.GenAI.Abstractions
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@using Amazon.Runtime.Internal
@using Amazon.S3
@using Markdig
@inject MarkdownPipeline Pipeline
@inject IJSRuntime JsRuntime
@inject AmazonBedrockAgentClient AgentClient;
@inject AmazonBedrockAgentRuntimeClient AgentRuntimeClient;

<style>
	.chat-container {
		height: calc(100% - 56px);
		overflow-y: auto;
	}

	.chat-messages {
		min-height: 100%;
		padding-bottom: 60px;
	}

	.input-group {
		position: fixed;
		bottom: 0;
		width: 70%;
		padding: 10px;
	}
</style>

<div class="container-fluid h-100 d-flex flex-column">
	<div class="row">
		<div class="col-12">
			<h1 class="mt-3 mb-3">Octank Contact Center</h1>
		</div>
	</div>
	<div class="row flex-grow-1">
		<div class="col-12 chat-container">
			<div class="chat-messages" id="chatMessages">
				@foreach (var item in _chatMessageHistory.Messages)
				{
					modCounter++;

					var label = item.Role == MessageRole.Human ? "Human " : "Assistant";
					<MudField Label="@label">
						@((MarkupString)Markdown.ToHtml(item.Content, Pipeline))
					</MudField>

					if (modCounter % 2 == 0)
					{
						<br />
						<br />
					}
				}

				<Progress Status="_status" OnClickCallback="OnPromptChanged"></Progress>
			</div>
		</div>
	</div>
	<form id="chat" method="post" @onsubmit="OnPromptChanged">
		<div class="row">
			<div class="col-7">
				<div class="input-group">
					<input type="text" class="form-control" placeholder="Type your message..." @bind-value=@_promptField />
					<button class="btn btn-primary" type="submit">Send</button>
				</div>
			</div>
		</div>
	</form>
</div>


@code {

	private int modCounter = 0;

	private const string TextModelId = "anthropic.claude-3-sonnet-20240229-v1:0";
	private const string BucketName = "dotnet-rag-datasource";
	private const string DocumentPrefix = "fict";
	private const string MetadataExtension = ".json";

	private readonly ChatMessageHistory _chatMessageHistory = new();
	public required string _promptField;
	Status _status = Status.Default;

	private KnowledgeBaseSummary? _knowledgeBase;
	private List<KnowledgeBaseSummary?>? _knowledgeBases = new();

	private HashSet<string> _countries = new();
	private HashSet<string> _cities = new();

	protected override async Task OnInitializedAsync()
	{
		var knowledgeBasesRequest = new ListKnowledgeBasesRequest();

		_knowledgeBases = (await AgentClient.ListKnowledgeBasesAsync(knowledgeBasesRequest)).KnowledgeBaseSummaries
			.OrderBy(x => x.UpdatedAt)
			.Where(x => x.Status.Equals("Active"))
			.ToList();

		_knowledgeBase = _knowledgeBases.FirstOrDefault(x => x.Name.StartsWith(DocumentPrefix, StringComparison.OrdinalIgnoreCase));

		await base.OnInitializedAsync();
		StateHasChanged();
	}

	// This method is called when the user enters a new prompt or question
	private async Task OnPromptChanged()
	{
		string question = _promptField;
		// Check if the question is null or empty, and return if it is
		if (string.IsNullOrEmpty(question))
			return;

		// Set the status to "Thinking" to indicate that the application is processing the question
		_status = Status.Thinking;
		// Trigger a UI update to reflect the new status
		StateHasChanged();

		// Add the user's question to the chat message history
		await _chatMessageHistory.AddUserMessage(question);

		try
		{
			var request = new RetrieveAndGenerateRequest
				{
					Input = new RetrieveAndGenerateInput { Text = question },
					RetrieveAndGenerateConfiguration = new RetrieveAndGenerateConfiguration
					{
						Type = RetrieveAndGenerateType.KNOWLEDGE_BASE,
						KnowledgeBaseConfiguration = new KnowledgeBaseRetrieveAndGenerateConfiguration
						{
							KnowledgeBaseId = _knowledgeBase?.KnowledgeBaseId,
							ModelArn = TextModelId,
							RetrievalConfiguration = new KnowledgeBaseRetrievalConfiguration
							{
								VectorSearchConfiguration = new KnowledgeBaseVectorSearchConfiguration
								{
									OverrideSearchType = "HYBRID"
								}
							}
						}
					}
				};

			var result = await AgentRuntimeClient!.RetrieveAndGenerateAsync(request);

			await _chatMessageHistory.AddAiMessage(result.Output.Text!);
		}
		catch (AmazonBedrockAgentRuntimeException ex)
		{
			Console.WriteLine($"AWS Error: {ex.Message}");
			throw;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"General Error: {ex.Message}");
			throw;
		}

		// Invoke the following code on the UI thread
		await InvokeAsync(() =>
		{
			// Clear the prompt field
			_promptField = "";
			// Set the status back to "Default"
			_status = Status.Default;
			// Scroll to the prompt field in the UI
			JsRuntime.InvokeVoidAsync("scrollToElement", "chat");

			// Trigger a UI update to reflect the changes
			StateHasChanged();
			return Task.CompletedTask;
		});
	}
}