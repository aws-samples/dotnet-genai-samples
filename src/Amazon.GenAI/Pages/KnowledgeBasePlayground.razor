@page "/knowledgeBase"
@using Amazon.BedrockAgent
@using Amazon.BedrockAgent.Model
@using Amazon.BedrockAgentRuntime
@using Amazon.BedrockAgentRuntime.Model
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@using Markdig
@inject MarkdownPipeline Pipeline
@inject IJSRuntime JsRuntime
@inject AmazonBedrockAgentClient AgentClient;
@inject AmazonBedrockAgentRuntimeClient AgentRuntimeClient;



<div class="container-fluid h-100 d-flex flex-column">
    <div class="row">
        <div class="col-12">
            <h1 class="mt-3 mb-3">Octank Contact Center</h1>
        </div>
    </div>

    <div class="row flex-grow-1">
        <div class="col-12 chat-container">
            <div class="chat-messages" id="chatMessages">
                @if (_chatMessageHistory.Messages.Count > 0)
                {
                    @foreach (var item in _chatMessageHistory.Messages)
                    {
                        var label = item.Role == MessageRole.Human ? "human" : "bot";

                        <div class="message-wrapper @label-wrapper">
                            <div class="timestamp">@item.DateTime.ToLongTimeString()</div>
                            <div class="message @label-message">
                                @((MarkupString)Markdown.ToHtml(item.Content, Pipeline))
                            </div>
                        </div>
                    }
                }
                else
                {
                    <h2>
                        <i>
                            Hello, how can I help you?
                        </i>
                    </h2>
                }
            </div>
        </div>
        <div id="chat"></div>
    </div>

    <EditForm Model="@_chatMessageHistory" OnSubmit="OnPromptChanged">
        <div class="row flex-grow-1">
            <div class="col-7">
                <div class="input-wrapper">
                    <MudPaper Elevation="5" Class="mb-2">
                        <MudToolBar>
                            <MudIconButton Icon="@Icons.Material.Outlined.Search" Color="Color.Inherit" Class="mr-5" />
                            <MudTextField T="string" @ref="_promptField" Label="Type your message..." Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                            <Progress Status="_status" OnClickCallback="OnPromptChanged"></Progress>
                        </MudToolBar>
                    </MudPaper>
                </div>
            </div>
        </div>
    </EditForm>
</div>


@code {

    private const string TextModelId = "anthropic.claude-3-haiku-20240307-v1:0";
    private const string DocumentPrefix = "fictitious";

    private readonly ChatMessageHistory _chatMessageHistory = new();
    private MudTextField<string>? _promptField;
    Status _status = Status.Default;

    private KnowledgeBaseSummary? _knowledgeBase;
    private List<KnowledgeBaseSummary?>? _knowledgeBases = new();

    protected override async Task OnInitializedAsync()
    {
        var knowledgeBasesRequest = new ListKnowledgeBasesRequest();

        _knowledgeBases = (await AgentClient.ListKnowledgeBasesAsync(knowledgeBasesRequest)).KnowledgeBaseSummaries
            .OrderBy(x => x.UpdatedAt)
            .Where(x => x.Status.Equals("Active"))
            .ToList();

        _knowledgeBase = _knowledgeBases.FirstOrDefault(x => x.Name.StartsWith(DocumentPrefix, StringComparison.OrdinalIgnoreCase));

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    // This method is called when the user enters a new prompt or question
    private async Task OnPromptChanged()
    {
        // Check if the question is null or empty, and return if it is
        if (string.IsNullOrEmpty(_promptField?.Value))
            return;

        // Set the status to "Thinking" to indicate that the application is processing the question
        _status = Status.Thinking;
        // Trigger a UI update to reflect the new status
        StateHasChanged();

        // Add the user's question to the chat message history
        await _chatMessageHistory.AddUserMessage(_promptField.Value);

        try
        {
            var request = new RetrieveAndGenerateRequest
                {
                    Input = new RetrieveAndGenerateInput { Text = _promptField.Value },
                    RetrieveAndGenerateConfiguration = new RetrieveAndGenerateConfiguration
                    {
                        Type = RetrieveAndGenerateType.KNOWLEDGE_BASE,
                        KnowledgeBaseConfiguration = new KnowledgeBaseRetrieveAndGenerateConfiguration
                        {
                            KnowledgeBaseId = _knowledgeBase?.KnowledgeBaseId,
                            ModelArn = TextModelId,
                            RetrievalConfiguration = new KnowledgeBaseRetrievalConfiguration
                            {
                                VectorSearchConfiguration = new KnowledgeBaseVectorSearchConfiguration
                                {
                                    OverrideSearchType = "HYBRID"
                                }
                            }
                        }
                    }
                };

            var result = await AgentRuntimeClient!.RetrieveAndGenerateAsync(request);

            await _chatMessageHistory.AddAiMessage(result.Output.Text!);
        }
        catch (AmazonBedrockAgentRuntimeException ex)
        {
            Console.WriteLine($"AWS Error: {ex.Message}");
            throw;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General Error: {ex.Message}");
            throw;
        }

        await InvokeAsync(() =>
        {
            _promptField?.SetText("");
            _status = Status.Default;
            JsRuntime.InvokeVoidAsync("scrollToElement", "chat");
            StateHasChanged();
            return Task.CompletedTask;
        });
    }
}