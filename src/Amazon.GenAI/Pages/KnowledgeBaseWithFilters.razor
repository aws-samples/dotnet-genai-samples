@page "/knowledgebase-with-filters"
@using Amazon.BedrockAgent
@using Amazon.BedrockAgent.Model
@using Amazon.BedrockAgentRuntime
@using Amazon.BedrockAgentRuntime.Model
@using Amazon.GenAI.Abstractions
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Components
@using Amazon.GenAI.Models
@using Amazon.Runtime.Internal
@using Amazon.S3
@using Markdig
@inject MarkdownPipeline Pipeline
@inject IJSRuntime JsRuntime
@inject AmazonBedrockAgentClient AgentClient;
@inject AmazonBedrockAgentRuntimeClient AgentRuntimeClient;
@inject AmazonS3Client AmazonS3Client;

<div class="container-fluid h-100 d-flex flex-column">
    <div class="row">
        <div class="col-12">
            <h1 class="mt-3 mb-3">Octank Contact Center</h1>
        </div>
    </div>

    <KnowledgeBaseFilter OnFilterUpdated="OnFilterUpdated" Countries="_countries" Cities="_cities"></KnowledgeBaseFilter>
    <MessageHistory History="_chatMessageHistory"></MessageHistory>
</div>

<div class="input-wrapper">
	<Prompt Model="_chatMessageHistory"
			OnPromptChanged="PromptChanged"
			Status="_status">
	</Prompt>
</div>

@code {

	private const string TextModelId = "anthropic.claude-3-haiku-20240307-v1:0";

	private const string BucketName = "dotnet-rag-datasource";
	private const string DocumentPrefix = "fictitious";
	private const string MetadataExtension = ".json";

	private readonly ChatMessageHistory _chatMessageHistory = new();
	Status _status = Status.Default;

	private KnowledgeBaseSummary? _knowledgeBase;
	private List<KnowledgeBaseSummary?>? _knowledgeBases = new();

	AutoConstructedList<RetrievalFilter>? _filters;

	private HashSet<string> _countries = new();
	private HashSet<string> _cities = new();

	protected override async Task OnInitializedAsync()
	{
		await UpdateDropDowns();

		var knowledgeBasesRequest = new ListKnowledgeBasesRequest();

		_knowledgeBases = (await AgentClient.ListKnowledgeBasesAsync(knowledgeBasesRequest)).KnowledgeBaseSummaries
			.OrderBy(x => x.UpdatedAt)
			.Where(x => x.Status.Equals("Active"))
			.ToList();

		_knowledgeBase = _knowledgeBases.FirstOrDefault(x => x.Name.StartsWith(DocumentPrefix, StringComparison.OrdinalIgnoreCase));

		await base.OnInitializedAsync();
		StateHasChanged();
	}

	private async Task PromptChanged(string prompt)
	{
        if (string.IsNullOrEmpty(prompt))
            return;

        _status = Status.Thinking;
        StateHasChanged();
        await _chatMessageHistory.AddUserMessage(prompt);

		try
		{
			var request = new RetrieveAndGenerateRequest
				{
					Input = new RetrieveAndGenerateInput { Text = prompt },
					RetrieveAndGenerateConfiguration = new RetrieveAndGenerateConfiguration
					{
						Type = RetrieveAndGenerateType.KNOWLEDGE_BASE,
						KnowledgeBaseConfiguration = new KnowledgeBaseRetrieveAndGenerateConfiguration
						{
							KnowledgeBaseId = _knowledgeBase?.KnowledgeBaseId,
							ModelArn = TextModelId,
							RetrievalConfiguration = new KnowledgeBaseRetrievalConfiguration
							{
								VectorSearchConfiguration = new KnowledgeBaseVectorSearchConfiguration
								{
									OverrideSearchType = "HYBRID"
								}
							}
						}
					}
				};

			if (_filters is not null)
			{
				request
					.RetrieveAndGenerateConfiguration
					.KnowledgeBaseConfiguration
					.RetrievalConfiguration
					.VectorSearchConfiguration
					.Filter = new RetrievalFilter { OrAll = _filters };
			}

			var result = await AgentRuntimeClient!.RetrieveAndGenerateAsync(request);

			await _chatMessageHistory.AddAiMessage(result.Output.Text!);
		}
		catch (AmazonBedrockAgentRuntimeException ex)
		{
			Console.WriteLine($"AWS Error: {ex.Message}");
			throw;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"General Error: {ex.Message}");
			throw;
		}

        await InvokeAsync(() =>
        {
            _status = Status.Default;
            JsRuntime.InvokeVoidAsync("scrollToElement", "chat");
            StateHasChanged();
            return Task.CompletedTask;
        });
	}

	private Task OnFilterUpdated(AutoConstructedList<RetrievalFilter>? filters)
	{
		_filters = filters!.Count == 0 ? null : filters;
		return Task.CompletedTask;
	}

	private async Task UpdateDropDowns()
	{
		try
		{
			var s3Wrapper = new S3Wrapper(AmazonS3Client);
			var attributes = await s3Wrapper.GetMetaDataFromS3(BucketName, DocumentPrefix, MetadataExtension);
			foreach (var item in attributes)
			{
				foreach (var dict in item)
				{
					if (dict.Key.Equals("country", StringComparison.OrdinalIgnoreCase)) _countries.Add(dict.Value);
					if (dict.Key.Equals("city", StringComparison.OrdinalIgnoreCase)) _cities.Add(dict.Value);
				}
			}
			_countries = _countries.OrderBy(x => x).ToHashSet();
			_cities = _cities.OrderBy(x => x).ToHashSet();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"An error occurred: {ex.Message}");
		}
	}
}