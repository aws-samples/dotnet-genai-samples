@page "/"
@page "/foundation-models"
@using Amazon.Bedrock.Model
@using Amazon.Bedrock
@using Amazon.Runtime
@using Amazon.Runtime.CredentialManagement
@inject AmazonBedrockClient BedrockClient

<MudText Typo="Typo.h3">Foundation Models</MudText>
<MudDataGrid Items="_foundationModels" Filterable="false" SortMode="@SortMode.None" Groupable="false" Outlined="true">
	<Columns>
		<PropertyColumn Property="x => x.ProviderName" Title="Provider" />
		<PropertyColumn Property="x => x.ModelName" Title="Model Name" />
		<PropertyColumn Property="x => x.ModelId" Title="Model Id" />
		<PropertyColumn Property="x => x.ResponseStreamingSupported" Title="Streaming Supported" />
		<PropertyColumn Property="@(x => x.InputModalities == null ? "" : String.Join(", ", x.InputModalities))" Title="Input Modalities" />
		<PropertyColumn Property="@(x => x.OutputModalities == null ? "" : String.Join(", ", x.OutputModalities))" Title="Output Modalities" />
		<PropertyColumn Property="@(x => x.CustomizationsSupported == null ? "" : String.Join(", ", x.CustomizationsSupported))" Title="Customizations Supported" />
	</Columns>
</MudDataGrid>


@code {
	private IEnumerable<FoundationModelSummary>? _foundationModels;

	protected override async Task OnInitializedAsync()
	{
		_foundationModels = (await BedrockClient.ListFoundationModelsAsync(new ListFoundationModelsRequest())).ModelSummaries.OrderBy(x => x.ProviderName);

		await base.OnInitializedAsync();
	}
}