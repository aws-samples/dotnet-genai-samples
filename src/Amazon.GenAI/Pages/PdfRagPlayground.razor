@page "/pdf-rag-playground"
@using System.Text
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Abstractions.OpenSearch
@using Amazon.GenAI.Abstractions.Pdf
@using Markdig
@inject MarkdownPipeline Pipeline
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4">PDF Retrieval-Augmented Generation (RAG) Playground</MudText>
<MudStack Style="width: 100%">
    <MudCard>
        <MudCardContent>
            <div class="d-flex">
                <div class="col-6">
                    <MudTextField @bind-Value="_openSearchEndpoint" Label="OpenSearch Endpoint" Variant="Variant.Text" />
                </div>
                <div class="col-2">
                    <MudTextField @bind-Value="_indexName" Label="Index Name" Variant="Variant.Text" />
                </div>
                <div class="col-2">
                    <MudTextField @bind-Value="_username" Label="Username" Variant="Variant.Text" />
                </div>
                <div class="col-2">
                    <MudTextField @bind-Value="_password" Label="Password" InputType="@_passwordInput" Variant="Variant.Text"
                                  Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="ShowPasswordClick" AdornmentAriaLabel="Show Password" />
                </div>
            </div>
        </MudCardContent>
    </MudCard>
    <MudCard>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="9">
                    Titan Text Embeddings v2 (@_embeddingModelId)
                </MudItem>
            </MudGrid>
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".pdf" OnFilesChanged="OnInputFileChanged" AppendMultipleFiles Hidden="false" Class="flex-1"
                           MaximumFileCount="50" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="300px" Outlined="true" Class="@_dragClass">
                        <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                        @foreach (var file in _loadedFiles)
                        {
                            <MudChip Color="Color.Dark" Text="@file.Key" />
                        }
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>
        </MudCardContent>
        <EditForm Model="@_chatMessageHistory" OnSubmit="OnSubmit">
            <MudCard>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                    <MudButton OnClick="Clear" Disabled="@(!_loadedFiles.Any())" Color="Color.Error" Variant="Variant.Filled" Class="ms-3">Clear</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudCard>
    <MudCard>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="9">
                    Claude 3 Haiku (@_textModelId)
                </MudItem>
            </MudGrid>
            <MudTimeline Reverse="true">
                @foreach (var item in _chatMessageHistory.Messages)
                {
                    var label = item.Role == MessageRole.Human ? "Human" : "Assistant";
                    <MudTimelineItem>
                        <MudField Label="@label" Class="white-space-pre-line">
                            @((MarkupString)Markdown.ToHtml(item.Content, Pipeline))
                        </MudField>
                    </MudTimelineItem>
                }
                <MudTimelineItem>
                    <MudTextField id="PromptId" @ref="_promptField" T="string" ValueChanged="@OnPromptChanged" Label="Human"></MudTextField>
                </MudTimelineItem>
            </MudTimeline>
        </MudCardContent>
        <MudCardActions>
            <MudButton Class="ml-auto" Disabled="@(_status > Status.Default)" Variant="Variant.Filled" Color="Color.Primary" OnClick="Reset">
                @switch (_status)
                {
                    case Status.Thinking:
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Thinking...</MudText>
                        break;

                    case Status.Indexing:
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Indexing Database...</MudText>
                        break;

                    case Status.Adding:
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Adding Documents...</MudText>
                        break;

                    case Status.Default:
                    default:
                        <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Replay" Size="Size.Small"></MudIcon>
                        <MudText Class="ms-2">Reset</MudText>
                        break;
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudStack>

@code {

    #region Variables

    private string? _textModelId;
    private string? _embeddingModelId;

    private string? _openSearchEndpoint;
    private string? _indexName;
    private string? _username;
    private string? _password;
    private const int Dimensions = 1536;

    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    OpenSearchVectorStore? _openSearchVectorStore;
    bool _indexCreated;
    bool _addedDocuments;

    enum Status
    {
        Default,
        Thinking,
        Indexing,
        Adding
    }
    Status _status = Status.Default;

    private readonly ChatMessageHistory _chatMessageHistory = new();
    private MudTextField<string>? _promptField;

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private Dictionary<string, string> _loadedFiles = new();

    string? _uploadDirectory;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        _textModelId = "anthropic.claude-3-haiku-20240307-v1:0";
        _embeddingModelId = "amazon.titan-embed-g1-text-02";
        _indexName = "my-test-index";

        _openSearchEndpoint = Environment.GetEnvironmentVariable("OPENSEARCH_URI");
        _username = Environment.GetEnvironmentVariable("OPENSEARCH_USERNAME");
        _password = Environment.GetEnvironmentVariable("OPENSEARCH_INITIAL_ADMIN_PASSWORD");
        var uri = new Uri(_openSearchEndpoint!);

        var options = new OpenSearchVectorStoreOptions
            {
                ConnectionUri = uri,
                Username = _username,
                Password = _password,
                IndexName = _indexName,
                Dimensions = Dimensions
            };
        _openSearchVectorStore = new OpenSearchVectorStore(BedrockRuntimeClient, _embeddingModelId, options);
        _indexCreated = true;

        _uploadDirectory = Path.Combine(Path.GetTempPath(), "unsafe_uploads");
        if (Directory.Exists(_uploadDirectory) == false) Directory.CreateDirectory(_uploadDirectory);

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnSubmit(EditContext context)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if (_indexCreated == false)
        {
            _status = Status.Indexing;
            _openSearchVectorStore?.CreateIndex();
            _status = Status.Default;
        }

        if (_addedDocuments == false)
        {
            _status = Status.Adding;
            await AddDocuments().ConfigureAwait(false);
            _status = Status.Default;
        }
    }

    private async Task AddDocuments()
    {
        foreach (var pdfSource in _loadedFiles.Select(file => new PdfPigPdfSource(file.Value)))
        {
            var documents = await pdfSource.LoadAsync();

            var pages = await _openSearchVectorStore?.AddDocumentsAsync(documents)!;
            Console.WriteLine("pages: " + pages.Count());
        }

        _addedDocuments = true;
    }

    private async Task OnPromptChanged(string question)
    {
        if (string.IsNullOrEmpty(question))
            return;

        if (_indexCreated == false)
        {
            _status = Status.Indexing;
            _openSearchVectorStore?.CreateIndex();
            _status = Status.Default;
        }

        _status = Status.Thinking;
        StateHasChanged();

        await _chatMessageHistory.AddUserMessage(question);

        var embeddingModel = new EmbeddingModel(BedrockRuntimeClient, _embeddingModelId);
        var questionEmbeddingsResponse = await embeddingModel.CreateEmbeddingsAsync(question)!;
        var embedding = questionEmbeddingsResponse?["embedding"]?.AsArray();
        var f = new float[Dimensions];
        for (var i = 0; i < embedding!.Count; i++)
        {
            f[i] = (float)embedding[i]?.AsValue()!;
        }

        var similaritySearchByVectorAsync = await _openSearchVectorStore?.SimilaritySearchByVectorAsync(f)!;
        var context = new StringBuilder();

        foreach (var document in similaritySearchByVectorAsync)
        {
            context.AppendLine(document.PageContent);
        }
        context.AppendLine(_chatMessageHistory.Messages.AsHistory());

        var promptText = $@"Use the following pieces of context to answer the question at the end.
If the answer is not in context then just say that you don't know, don't try to make up an answer.
Keep the answer as short as possible.

System:
{context}

Question: {question}
Helpful Answer:";

        var textModel = new TextModel(BedrockRuntimeClient, _textModelId);
        var generatedText = await textModel.GenerateAsync(promptText);

        await _chatMessageHistory.AddAiMessage(generatedText!);

        await InvokeAsync(() =>
        {
            _promptField?.SetText("");
            _status = Status.Default;
            JsRuntime.InvokeVoidAsync("scrollToElement", "PromptId");

            StateHasChanged();
            return Task.CompletedTask;
        });
    }

    #region Utility Methods

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        const long maxFileSize = 1024L * 1024L * 1024L * 2L;

        ClearDragClass();
        foreach (var file in e.GetMultipleFiles())
        {
            var targetFile = Path.Combine(_uploadDirectory!, file.Name);
            await using (var outputStream = File.Create(targetFile))
            {
                await file.OpenReadStream(maxFileSize).CopyToAsync(outputStream);
            }
            _loadedFiles.Add(file.Name, targetFile);
        }
    }

    private async Task Clear()
    {
        _loadedFiles.Clear();
        await _chatMessageHistory.Clear();
        ClearDragClass();
        await _promptField?.SetText("")!;
        await Task.Delay(100);
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

    private async Task Reset(MouseEventArgs e)
    {
        await _promptField?.SetText("")!;
        _loadedFiles = new();
    }

    void ShowPasswordClick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    #endregion
}