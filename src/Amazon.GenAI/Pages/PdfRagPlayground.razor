@*@page "/"*@
@page "/pdf-rag-playground"
@using System.Text
@using Amazon.BedrockRuntime
@using Amazon.GenAI.Abstractions.Bedrock
@using Amazon.GenAI.Abstractions.ChatHistory
@using Amazon.GenAI.Abstractions.Message
@using Amazon.GenAI.Abstractions.OpenSearch
@using Amazon.GenAI.Abstractions.Pdf
@using Amazon.GenAI.Abstractions
@using Amazon.OpenSearchServerless
@using Amazon.OpenSearchServerless.Model
@using Markdig
@inject MarkdownPipeline Pipeline
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4">PDF Retrieval-Augmented Generation (RAG) Playground</MudText>
<MudStack Style="width: 100%">
    <MudCard>
        <MudCardContent>
            <div>
                <MudSelect T="CollectionSummary" @bind-Value="_collection" ToStringFunc="@_selectConverter" Required="true"
                           Label="Select OpenSearchServerless Collections"
                           Variant="Variant.Outlined">
                    @if (_collections != null)
                    {
                        @foreach (var item in _collections)
                        {
                            _collection ??= item;
                            <MudSelectItem Value="@item" />
                        }
                    }
                </MudSelect>
            </div>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
            <MudGrid>
                @*TODO 2*@
                
            </MudGrid>
            @*TODO 6*@
            
        </MudCardContent>
        <EditForm Model="@_chatMessageHistory" OnSubmit="OnSubmit">
            <MudCard>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                    <MudButton OnClick="Clear" Disabled="@(!_loadedFiles.Any())" Color="Color.Error" Variant="Variant.Filled" Class="ms-3">Clear</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudCard>
    <MudCard>
        <MudCardContent>
            <MudGrid>
                @*TODO 3*@
                
            </MudGrid>
            <MudTimeline Reverse="true">
                @foreach (var item in _chatMessageHistory.Messages)
                {
                    var label = item.Role == MessageRole.Human ? "Human" : "Assistant";
                    <MudTimelineItem>
                        <MudField Label="@label" Class="white-space-pre-line">
                            @((MarkupString)Markdown.ToHtml(item.Content, Pipeline))
                        </MudField>
                    </MudTimelineItem>
                }
                <MudTimelineItem>
                    <MudTextField id="PromptId" @ref="_promptField" T="string" ValueChanged="@OnPromptChanged" Label="Human"></MudTextField>
                </MudTimelineItem>
            </MudTimeline>
        </MudCardContent>
        <MudCardActions>
            <MudButton Class="ml-auto" Disabled="@(_status > Status.Default)" Variant="Variant.Filled" Color="Color.Primary" OnClick="Reset">
                @switch (_status)
                {
                    case Status.Thinking:
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Thinking...</MudText>
                        break;

                    case Status.Indexing:
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Indexing Database...</MudText>
                        break;

                    case Status.Adding:
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Adding Documents...</MudText>
                        break;

                    case Status.Default:
                    default:
                        <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Replay" Size="Size.Small"></MudIcon>
                        <MudText Class="ms-2">Reset</MudText>
                        break;
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudStack>

@code {

    #region Variables

    readonly Func<CollectionSummary, string> _selectConverter = coll => string.Concat(coll?.Name, " , (", coll?.Id, ")");
    private CollectionSummary? _collection;
    private List<CollectionSummary?>? _collections;
    private string? _indexName;
    private const int Dimensions = 1536;
    private OpenSearchServerlessVectorStore? _openSearchVectorStore;

    IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();

    private string? _textModelId;
    private string? _embeddingModelId;

    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    bool _indexCreated;
    bool _addedDocuments;

    enum Status
    {
        Default,
        Thinking,
        Indexing,
        Adding
    }
    Status _status = Status.Default;

    // TODO 7


    private MudTextField<string>? _promptField;

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    // TODO 4


    string? _uploadDirectory;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        // TODO 1


        _uploadDirectory = Path.Combine(Path.GetTempPath(), "unsafe_uploads");
        if (Directory.Exists(_uploadDirectory) == false) Directory.CreateDirectory(_uploadDirectory);

        _collections = (await new AmazonOpenSearchServerlessClient(RegionEndpoint.USWest2).ListCollectionsAsync(new ListCollectionsRequest()))
            .CollectionSummaries
            .ToList();

        var options = new OpenSearchVectorStoreOptions
        {
            Region = RegionEndpoint.USWest2,
            IndexName = _indexName,
            Dimensions = Dimensions,
            CollectionArn = _collections[0]?.Arn,
        };

        _openSearchVectorStore = new OpenSearchServerlessVectorStore(BedrockRuntimeClient, _embeddingModelId, _textModelId, options);

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnSubmit(EditContext context)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        if (_indexCreated == false)
        {
            _status = Status.Indexing;
            _openSearchVectorStore?.CreateIndex();
            _status = Status.Default;
        }

        if (_addedDocuments == false)
        {
            _status = Status.Adding;
            await AddDocuments().ConfigureAwait(false);
            _status = Status.Default;
        }
    }

    private async Task AddDocuments()
    {
        // TODO 5


    }

    private async Task OnPromptChanged(string question)
    {
        if (string.IsNullOrEmpty(question))
            return;

        if (_indexCreated == false)
        {
            _status = Status.Indexing;
            _openSearchVectorStore?.CreateIndex();
            _status = Status.Default;
        }

        _status = Status.Thinking;
        StateHasChanged();

        // TODO 8


        // TODO 10


        // TODO 11


        // TODO 9


        await InvokeAsync(() =>
        {
            _promptField?.SetText("");
            _status = Status.Default;
            JsRuntime.InvokeVoidAsync("scrollToElement", "PromptId");

            StateHasChanged();
            return Task.CompletedTask;
        });
    }

    #region Utility Methods

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        const long maxFileSize = 1024L * 1024L * 1024L * 2L;

        ClearDragClass();
        foreach (var file in e.GetMultipleFiles())
        {
            var targetFile = Path.Combine(_uploadDirectory!, file.Name);
            await using (var outputStream = File.Create(targetFile))
            {
                await file.OpenReadStream(maxFileSize).CopyToAsync(outputStream);
            }
            _loadedFiles.Add(file.Name, targetFile);
        }
    }

    private async Task Clear()
    {
        _loadedFiles.Clear();
        await _chatMessageHistory.Clear();
        ClearDragClass();
        await _promptField?.SetText("")!;
        await Task.Delay(100);
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

    private async Task Reset(MouseEventArgs e)
    {
        await _promptField?.SetText("")!;
        _loadedFiles = new();
    }

    void ShowPasswordClick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    #endregion
}